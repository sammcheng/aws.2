'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "rekognition",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class RekognitionClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultRekognitionHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class RekognitionServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, RekognitionServiceException.prototype);
    }
}

class AccessDeniedException extends RekognitionServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const UnsuccessfulFaceAssociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
    LOW_MATCH_CONFIDENCE: "LOW_MATCH_CONFIDENCE",
};
const UserStatus = {
    ACTIVE: "ACTIVE",
    CREATED: "CREATED",
    CREATING: "CREATING",
    UPDATING: "UPDATING",
};
class ConflictException extends RekognitionServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class IdempotentParameterMismatchException extends RekognitionServiceException {
    name = "IdempotentParameterMismatchException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class InternalServerError extends RekognitionServiceException {
    name = "InternalServerError";
    $fault = "server";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class InvalidParameterException extends RekognitionServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ProvisionedThroughputExceededException extends RekognitionServiceException {
    name = "ProvisionedThroughputExceededException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ResourceNotFoundException extends RekognitionServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ServiceQuotaExceededException extends RekognitionServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ThrottlingException extends RekognitionServiceException {
    name = "ThrottlingException";
    $fault = "server";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const Attribute = {
    AGE_RANGE: "AGE_RANGE",
    ALL: "ALL",
    BEARD: "BEARD",
    DEFAULT: "DEFAULT",
    EMOTIONS: "EMOTIONS",
    EYEGLASSES: "EYEGLASSES",
    EYES_OPEN: "EYES_OPEN",
    EYE_DIRECTION: "EYE_DIRECTION",
    FACE_OCCLUDED: "FACE_OCCLUDED",
    GENDER: "GENDER",
    MOUTH_OPEN: "MOUTH_OPEN",
    MUSTACHE: "MUSTACHE",
    SMILE: "SMILE",
    SUNGLASSES: "SUNGLASSES",
};
const BodyPart = {
    FACE: "FACE",
    HEAD: "HEAD",
    LEFT_HAND: "LEFT_HAND",
    RIGHT_HAND: "RIGHT_HAND",
};
const ProtectiveEquipmentType = {
    FACE_COVER: "FACE_COVER",
    HAND_COVER: "HAND_COVER",
    HEAD_COVER: "HEAD_COVER",
};
const EmotionName = {
    ANGRY: "ANGRY",
    CALM: "CALM",
    CONFUSED: "CONFUSED",
    DISGUSTED: "DISGUSTED",
    FEAR: "FEAR",
    HAPPY: "HAPPY",
    SAD: "SAD",
    SURPRISED: "SURPRISED",
    UNKNOWN: "UNKNOWN",
};
const LandmarkType = {
    chinBottom: "chinBottom",
    eyeLeft: "eyeLeft",
    eyeRight: "eyeRight",
    leftEyeBrowLeft: "leftEyeBrowLeft",
    leftEyeBrowRight: "leftEyeBrowRight",
    leftEyeBrowUp: "leftEyeBrowUp",
    leftEyeDown: "leftEyeDown",
    leftEyeLeft: "leftEyeLeft",
    leftEyeRight: "leftEyeRight",
    leftEyeUp: "leftEyeUp",
    leftPupil: "leftPupil",
    midJawlineLeft: "midJawlineLeft",
    midJawlineRight: "midJawlineRight",
    mouthDown: "mouthDown",
    mouthLeft: "mouthLeft",
    mouthRight: "mouthRight",
    mouthUp: "mouthUp",
    nose: "nose",
    noseLeft: "noseLeft",
    noseRight: "noseRight",
    rightEyeBrowLeft: "rightEyeBrowLeft",
    rightEyeBrowRight: "rightEyeBrowRight",
    rightEyeBrowUp: "rightEyeBrowUp",
    rightEyeDown: "rightEyeDown",
    rightEyeLeft: "rightEyeLeft",
    rightEyeRight: "rightEyeRight",
    rightEyeUp: "rightEyeUp",
    rightPupil: "rightPupil",
    upperJawlineLeft: "upperJawlineLeft",
    upperJawlineRight: "upperJawlineRight",
};
const KnownGenderType = {
    Female: "Female",
    Male: "Male",
    Nonbinary: "Nonbinary",
    Unlisted: "Unlisted",
};
const GenderType = {
    Female: "Female",
    Male: "Male",
};
const CelebrityRecognitionSortBy = {
    ID: "ID",
    TIMESTAMP: "TIMESTAMP",
};
const ChallengeType = {
    FACE_MOVEMENT_AND_LIGHT_CHALLENGE: "FaceMovementAndLightChallenge",
    FACE_MOVEMENT_CHALLENGE: "FaceMovementChallenge",
};
const QualityFilter = {
    AUTO: "AUTO",
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
    NONE: "NONE",
};
const OrientationCorrection = {
    ROTATE_0: "ROTATE_0",
    ROTATE_180: "ROTATE_180",
    ROTATE_270: "ROTATE_270",
    ROTATE_90: "ROTATE_90",
};
class ImageTooLargeException extends RekognitionServiceException {
    name = "ImageTooLargeException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ImageTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ImageTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class InvalidImageFormatException extends RekognitionServiceException {
    name = "InvalidImageFormatException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidImageFormatException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidImageFormatException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class InvalidS3ObjectException extends RekognitionServiceException {
    name = "InvalidS3ObjectException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidS3ObjectException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidS3ObjectException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
const ContentModerationAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
const ContentModerationSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
class LimitExceededException extends RekognitionServiceException {
    name = "LimitExceededException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ResourceInUseException extends RekognitionServiceException {
    name = "ResourceInUseException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
class ResourceAlreadyExistsException extends RekognitionServiceException {
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const DatasetType = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
const ProjectAutoUpdate = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const CustomizationFeature = {
    CONTENT_MODERATION: "CONTENT_MODERATION",
    CUSTOM_LABELS: "CUSTOM_LABELS",
};
const DatasetStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
const DatasetStatusMessageCode = {
    CLIENT_ERROR: "CLIENT_ERROR",
    SERVICE_ERROR: "SERVICE_ERROR",
    SUCCESS: "SUCCESS",
};
const UnsuccessfulFaceDeletionReason = {
    ASSOCIATED_TO_AN_EXISTING_USER: "ASSOCIATED_TO_AN_EXISTING_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
const ProjectStatus = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
class InvalidPolicyRevisionIdException extends RekognitionServiceException {
    name = "InvalidPolicyRevisionIdException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidPolicyRevisionIdException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPolicyRevisionIdException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const ProjectVersionStatus = {
    COPYING_COMPLETED: "COPYING_COMPLETED",
    COPYING_FAILED: "COPYING_FAILED",
    COPYING_IN_PROGRESS: "COPYING_IN_PROGRESS",
    DELETING: "DELETING",
    DEPRECATED: "DEPRECATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TRAINING_COMPLETED: "TRAINING_COMPLETED",
    TRAINING_FAILED: "TRAINING_FAILED",
    TRAINING_IN_PROGRESS: "TRAINING_IN_PROGRESS",
};
class InvalidPaginationTokenException extends RekognitionServiceException {
    name = "InvalidPaginationTokenException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidPaginationTokenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPaginationTokenException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const StreamProcessorStatus = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    UPDATING: "UPDATING",
};
class ResourceNotReadyException extends RekognitionServiceException {
    name = "ResourceNotReadyException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const DetectLabelsFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
    IMAGE_PROPERTIES: "IMAGE_PROPERTIES",
};
class HumanLoopQuotaExceededException extends RekognitionServiceException {
    name = "HumanLoopQuotaExceededException";
    $fault = "client";
    ResourceType;
    QuotaCode;
    ServiceCode;
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "HumanLoopQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, HumanLoopQuotaExceededException.prototype);
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const TextTypes = {
    LINE: "LINE",
    WORD: "WORD",
};
const UnsuccessfulFaceDisassociationReason = {
    ASSOCIATED_TO_A_DIFFERENT_USER: "ASSOCIATED_TO_A_DIFFERENT_USER",
    FACE_NOT_FOUND: "FACE_NOT_FOUND",
};
const FaceAttributes = {
    ALL: "ALL",
    DEFAULT: "DEFAULT",
};
const FaceSearchSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
const VideoJobStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
const VideoColorRange = {
    FULL: "FULL",
    LIMITED: "LIMITED",
};
const LivenessSessionStatus = {
    CREATED: "CREATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
class SessionNotFoundException extends RekognitionServiceException {
    name = "SessionNotFoundException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "SessionNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SessionNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const LabelDetectionAggregateBy = {
    SEGMENTS: "SEGMENTS",
    TIMESTAMPS: "TIMESTAMPS",
};
const LabelDetectionSortBy = {
    NAME: "NAME",
    TIMESTAMP: "TIMESTAMP",
};
const MediaAnalysisJobFailureCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_KMS_KEY: "INVALID_KMS_KEY",
    INVALID_MANIFEST: "INVALID_MANIFEST",
    INVALID_OUTPUT_CONFIG: "INVALID_OUTPUT_CONFIG",
    INVALID_S3_OBJECT: "INVALID_S3_OBJECT",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
    RESOURCE_NOT_READY: "RESOURCE_NOT_READY",
    THROTTLED: "THROTTLED",
};
const MediaAnalysisJobStatus = {
    CREATED: "CREATED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    SUCCEEDED: "SUCCEEDED",
};
const PersonTrackingSortBy = {
    INDEX: "INDEX",
    TIMESTAMP: "TIMESTAMP",
};
const TechnicalCueType = {
    BLACK_FRAMES: "BlackFrames",
    COLOR_BARS: "ColorBars",
    CONTENT: "Content",
    END_CREDITS: "EndCredits",
    OPENING_CREDITS: "OpeningCredits",
    SLATE: "Slate",
    STUDIO_LOGO: "StudioLogo",
};
const SegmentType = {
    SHOT: "SHOT",
    TECHNICAL_CUE: "TECHNICAL_CUE",
};
const Reason = {
    EXCEEDS_MAX_FACES: "EXCEEDS_MAX_FACES",
    EXTREME_POSE: "EXTREME_POSE",
    LOW_BRIGHTNESS: "LOW_BRIGHTNESS",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    LOW_FACE_QUALITY: "LOW_FACE_QUALITY",
    LOW_SHARPNESS: "LOW_SHARPNESS",
    SMALL_BOUNDING_BOX: "SMALL_BOUNDING_BOX",
};
class InvalidManifestException extends RekognitionServiceException {
    name = "InvalidManifestException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "InvalidManifestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidManifestException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const LabelDetectionFeatureName = {
    GENERAL_LABELS: "GENERAL_LABELS",
};
const AuditImageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Bytes && { Bytes: smithyClient.SENSITIVE_STRING }),
});
const GetFaceLivenessSessionResultsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReferenceImage && { ReferenceImage: AuditImageFilterSensitiveLog(obj.ReferenceImage) }),
    ...(obj.AuditImages && { AuditImages: obj.AuditImages.map((item) => AuditImageFilterSensitiveLog(item)) }),
});

class MalformedPolicyDocumentException extends RekognitionServiceException {
    name = "MalformedPolicyDocumentException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const UnsearchedFaceReason = {
    EXCEEDS_MAX_FACES: "EXCEEDS_MAX_FACES",
    EXTREME_POSE: "EXTREME_POSE",
    FACE_NOT_LARGEST: "FACE_NOT_LARGEST",
    LOW_BRIGHTNESS: "LOW_BRIGHTNESS",
    LOW_CONFIDENCE: "LOW_CONFIDENCE",
    LOW_FACE_QUALITY: "LOW_FACE_QUALITY",
    LOW_SHARPNESS: "LOW_SHARPNESS",
    SMALL_BOUNDING_BOX: "SMALL_BOUNDING_BOX",
};
class VideoTooLargeException extends RekognitionServiceException {
    name = "VideoTooLargeException";
    $fault = "client";
    Message;
    Code;
    Logref;
    constructor(opts) {
        super({
            name: "VideoTooLargeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, VideoTooLargeException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.Logref = opts.Logref;
    }
}
const StreamProcessorParameterToDelete = {
    ConnectedHomeMinConfidence: "ConnectedHomeMinConfidence",
    RegionsOfInterest: "RegionsOfInterest",
};

const se_AssociateFacesCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateFaces");
    let body;
    body = JSON.stringify(se_AssociateFacesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CompareFacesCommand = async (input, context) => {
    const headers = sharedHeaders("CompareFaces");
    let body;
    body = JSON.stringify(se_CompareFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CopyProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CopyProjectVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCollection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFaceLivenessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFaceLivenessSession");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProjectVersion");
    let body;
    body = JSON.stringify(se_CreateProjectVersionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStreamProcessor");
    let body;
    body = JSON.stringify(se_CreateStreamProcessorRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUser");
    let body;
    body = JSON.stringify(se_CreateUserRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCollection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataset");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFaces");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteProjectPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProjectPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProjectVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStreamProcessor");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify(se_DeleteUserRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCollection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProjects");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeProjectVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProjectVersions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStreamProcessor");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectCustomLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectCustomLabels");
    let body;
    body = JSON.stringify(se_DetectCustomLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectFaces");
    let body;
    body = JSON.stringify(se_DetectFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectLabels");
    let body;
    body = JSON.stringify(se_DetectLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectModerationLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectModerationLabels");
    let body;
    body = JSON.stringify(se_DetectModerationLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectProtectiveEquipmentCommand = async (input, context) => {
    const headers = sharedHeaders("DetectProtectiveEquipment");
    let body;
    body = JSON.stringify(se_DetectProtectiveEquipmentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetectTextCommand = async (input, context) => {
    const headers = sharedHeaders("DetectText");
    let body;
    body = JSON.stringify(se_DetectTextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateFaces");
    let body;
    body = JSON.stringify(se_DisassociateFacesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DistributeDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("DistributeDatasetEntries");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCelebrityInfoCommand = async (input, context) => {
    const headers = sharedHeaders("GetCelebrityInfo");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCelebrityRecognitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetCelebrityRecognition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetContentModerationCommand = async (input, context) => {
    const headers = sharedHeaders("GetContentModeration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetFaceDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetFaceLivenessSessionResultsCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceLivenessSessionResults");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetFaceSearchCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceSearch");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLabelDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetLabelDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetMediaAnalysisJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetMediaAnalysisJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPersonTrackingCommand = async (input, context) => {
    const headers = sharedHeaders("GetPersonTracking");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSegmentDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSegmentDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTextDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_IndexFacesCommand = async (input, context) => {
    const headers = sharedHeaders("IndexFaces");
    let body;
    body = JSON.stringify(se_IndexFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCollectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCollections");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetEntries");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDatasetLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetLabels");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListFaces");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMediaAnalysisJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMediaAnalysisJobs");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListProjectPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjectPolicies");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStreamProcessorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStreamProcessors");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsers");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutProjectPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutProjectPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RecognizeCelebritiesCommand = async (input, context) => {
    const headers = sharedHeaders("RecognizeCelebrities");
    let body;
    body = JSON.stringify(se_RecognizeCelebritiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchFacesCommand = async (input, context) => {
    const headers = sharedHeaders("SearchFaces");
    let body;
    body = JSON.stringify(se_SearchFacesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchFacesByImageCommand = async (input, context) => {
    const headers = sharedHeaders("SearchFacesByImage");
    let body;
    body = JSON.stringify(se_SearchFacesByImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchUsersCommand = async (input, context) => {
    const headers = sharedHeaders("SearchUsers");
    let body;
    body = JSON.stringify(se_SearchUsersRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchUsersByImageCommand = async (input, context) => {
    const headers = sharedHeaders("SearchUsersByImage");
    let body;
    body = JSON.stringify(se_SearchUsersByImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartCelebrityRecognitionCommand = async (input, context) => {
    const headers = sharedHeaders("StartCelebrityRecognition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartContentModerationCommand = async (input, context) => {
    const headers = sharedHeaders("StartContentModeration");
    let body;
    body = JSON.stringify(se_StartContentModerationRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartFaceDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartFaceDetection");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartFaceSearchCommand = async (input, context) => {
    const headers = sharedHeaders("StartFaceSearch");
    let body;
    body = JSON.stringify(se_StartFaceSearchRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartLabelDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartLabelDetection");
    let body;
    body = JSON.stringify(se_StartLabelDetectionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartMediaAnalysisJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMediaAnalysisJob");
    let body;
    body = JSON.stringify(se_StartMediaAnalysisJobRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartPersonTrackingCommand = async (input, context) => {
    const headers = sharedHeaders("StartPersonTracking");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("StartProjectVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSegmentDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSegmentDetection");
    let body;
    body = JSON.stringify(se_StartSegmentDetectionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("StartStreamProcessor");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartTextDetection");
    let body;
    body = JSON.stringify(se_StartTextDetectionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("StopProjectVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("StopStreamProcessor");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDatasetEntries");
    let body;
    body = JSON.stringify(se_UpdateDatasetEntriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStreamProcessor");
    let body;
    body = JSON.stringify(se_UpdateStreamProcessorRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AssociateFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AssociateFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CompareFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CompareFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopyProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFaceLivenessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCollectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProjectVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeStreamProcessorResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectCustomLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectCustomLabelsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectLabelsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectModerationLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectModerationLabelsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectProtectiveEquipmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectProtectiveEquipmentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetectTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetectTextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DistributeDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCelebrityInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetCelebrityRecognitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetContentModerationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetFaceDetectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetFaceLivenessSessionResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetFaceLivenessSessionResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetFaceSearchResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetLabelDetectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetMediaAnalysisJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetMediaAnalysisJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetPersonTrackingResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetSegmentDetectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetTextDetectionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_IndexFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_IndexFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCollectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDatasetLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMediaAnalysisJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMediaAnalysisJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProjectPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListProjectPoliciesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStreamProcessorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RecognizeCelebritiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RecognizeCelebritiesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchFacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchFacesByImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchFacesByImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchUsersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchUsersByImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchUsersByImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartMediaAnalysisJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.rekognition#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await de_ImageTooLargeExceptionRes(parsedOutput);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await de_InvalidImageFormatExceptionRes(parsedOutput);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await de_InvalidS3ObjectExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.rekognition#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput);
        case "InvalidPolicyRevisionIdException":
        case "com.amazonaws.rekognition#InvalidPolicyRevisionIdException":
            throw await de_InvalidPolicyRevisionIdExceptionRes(parsedOutput);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await de_InvalidPaginationTokenExceptionRes(parsedOutput);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput);
        case "HumanLoopQuotaExceededException":
        case "com.amazonaws.rekognition#HumanLoopQuotaExceededException":
            throw await de_HumanLoopQuotaExceededExceptionRes(parsedOutput);
        case "SessionNotFoundException":
        case "com.amazonaws.rekognition#SessionNotFoundException":
            throw await de_SessionNotFoundExceptionRes(parsedOutput);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.rekognition#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await de_VideoTooLargeExceptionRes(parsedOutput);
        case "InvalidManifestException":
        case "com.amazonaws.rekognition#InvalidManifestException":
            throw await de_InvalidManifestExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_HumanLoopQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new HumanLoopQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ImageTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ImageTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidImageFormatExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidImageFormatException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidManifestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidManifestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidPaginationTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidPaginationTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidPolicyRevisionIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidPolicyRevisionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidS3ObjectExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidS3ObjectException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SessionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new SessionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_VideoTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new VideoTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AssociateFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        CollectionId: [],
        FaceIds: smithyClient._json,
        UserId: [],
        UserMatchThreshold: smithyClient.serializeFloat,
    });
};
const se_BlackFrame = (input, context) => {
    return smithyClient.take(input, {
        MaxPixelThreshold: smithyClient.serializeFloat,
        MinCoveragePercentage: smithyClient.serializeFloat,
    });
};
const se_BoundingBox = (input, context) => {
    return smithyClient.take(input, {
        Height: smithyClient.serializeFloat,
        Left: smithyClient.serializeFloat,
        Top: smithyClient.serializeFloat,
        Width: smithyClient.serializeFloat,
    });
};
const se_CompareFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        QualityFilter: [],
        SimilarityThreshold: smithyClient.serializeFloat,
        SourceImage: (_) => se_Image(_, context),
        TargetImage: (_) => se_Image(_, context),
    });
};
const se_ConnectedHomeSettings = (input, context) => {
    return smithyClient.take(input, {
        Labels: smithyClient._json,
        MinConfidence: smithyClient.serializeFloat,
    });
};
const se_ConnectedHomeSettingsForUpdate = (input, context) => {
    return smithyClient.take(input, {
        Labels: smithyClient._json,
        MinConfidence: smithyClient.serializeFloat,
    });
};
const se_CreateProjectVersionRequest = (input, context) => {
    return smithyClient.take(input, {
        FeatureConfig: (_) => se_CustomizationFeatureConfig(_),
        KmsKeyId: [],
        OutputConfig: smithyClient._json,
        ProjectArn: [],
        Tags: smithyClient._json,
        TestingData: smithyClient._json,
        TrainingData: smithyClient._json,
        VersionDescription: [],
        VersionName: [],
    });
};
const se_CreateStreamProcessorRequest = (input, context) => {
    return smithyClient.take(input, {
        DataSharingPreference: smithyClient._json,
        Input: smithyClient._json,
        KmsKeyId: [],
        Name: [],
        NotificationChannel: smithyClient._json,
        Output: smithyClient._json,
        RegionsOfInterest: (_) => se_RegionsOfInterest(_),
        RoleArn: [],
        Settings: (_) => se_StreamProcessorSettings(_),
        Tags: smithyClient._json,
    });
};
const se_CreateUserRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        CollectionId: [],
        UserId: [],
    });
};
const se_CustomizationFeatureConfig = (input, context) => {
    return smithyClient.take(input, {
        ContentModeration: (_) => se_CustomizationFeatureContentModerationConfig(_),
    });
};
const se_CustomizationFeatureContentModerationConfig = (input, context) => {
    return smithyClient.take(input, {
        ConfidenceThreshold: smithyClient.serializeFloat,
    });
};
const se_DatasetChanges = (input, context) => {
    return smithyClient.take(input, {
        GroundTruth: context.base64Encoder,
    });
};
const se_DeleteUserRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        CollectionId: [],
        UserId: [],
    });
};
const se_DetectCustomLabelsRequest = (input, context) => {
    return smithyClient.take(input, {
        Image: (_) => se_Image(_, context),
        MaxResults: [],
        MinConfidence: smithyClient.serializeFloat,
        ProjectVersionArn: [],
    });
};
const se_DetectFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        Attributes: smithyClient._json,
        Image: (_) => se_Image(_, context),
    });
};
const se_DetectionFilter = (input, context) => {
    return smithyClient.take(input, {
        MinBoundingBoxHeight: smithyClient.serializeFloat,
        MinBoundingBoxWidth: smithyClient.serializeFloat,
        MinConfidence: smithyClient.serializeFloat,
    });
};
const se_DetectLabelsRequest = (input, context) => {
    return smithyClient.take(input, {
        Features: smithyClient._json,
        Image: (_) => se_Image(_, context),
        MaxLabels: [],
        MinConfidence: smithyClient.serializeFloat,
        Settings: smithyClient._json,
    });
};
const se_DetectModerationLabelsRequest = (input, context) => {
    return smithyClient.take(input, {
        HumanLoopConfig: smithyClient._json,
        Image: (_) => se_Image(_, context),
        MinConfidence: smithyClient.serializeFloat,
        ProjectVersion: [],
    });
};
const se_DetectProtectiveEquipmentRequest = (input, context) => {
    return smithyClient.take(input, {
        Image: (_) => se_Image(_, context),
        SummarizationAttributes: (_) => se_ProtectiveEquipmentSummarizationAttributes(_),
    });
};
const se_DetectTextFilters = (input, context) => {
    return smithyClient.take(input, {
        RegionsOfInterest: (_) => se_RegionsOfInterest(_),
        WordFilter: (_) => se_DetectionFilter(_),
    });
};
const se_DetectTextRequest = (input, context) => {
    return smithyClient.take(input, {
        Filters: (_) => se_DetectTextFilters(_),
        Image: (_) => se_Image(_, context),
    });
};
const se_DisassociateFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        CollectionId: [],
        FaceIds: smithyClient._json,
        UserId: [],
    });
};
const se_FaceSearchSettings = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        FaceMatchThreshold: smithyClient.serializeFloat,
    });
};
const se_Image = (input, context) => {
    return smithyClient.take(input, {
        Bytes: context.base64Encoder,
        S3Object: smithyClient._json,
    });
};
const se_IndexFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        DetectionAttributes: smithyClient._json,
        ExternalImageId: [],
        Image: (_) => se_Image(_, context),
        MaxFaces: [],
        QualityFilter: [],
    });
};
const se_MediaAnalysisDetectModerationLabelsConfig = (input, context) => {
    return smithyClient.take(input, {
        MinConfidence: smithyClient.serializeFloat,
        ProjectVersion: [],
    });
};
const se_MediaAnalysisOperationsConfig = (input, context) => {
    return smithyClient.take(input, {
        DetectModerationLabels: (_) => se_MediaAnalysisDetectModerationLabelsConfig(_),
    });
};
const se_Point = (input, context) => {
    return smithyClient.take(input, {
        X: smithyClient.serializeFloat,
        Y: smithyClient.serializeFloat,
    });
};
const se_Polygon = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Point(entry);
    });
};
const se_ProtectiveEquipmentSummarizationAttributes = (input, context) => {
    return smithyClient.take(input, {
        MinConfidence: smithyClient.serializeFloat,
        RequiredEquipmentTypes: smithyClient._json,
    });
};
const se_RecognizeCelebritiesRequest = (input, context) => {
    return smithyClient.take(input, {
        Image: (_) => se_Image(_, context),
    });
};
const se_RegionOfInterest = (input, context) => {
    return smithyClient.take(input, {
        BoundingBox: (_) => se_BoundingBox(_),
        Polygon: (_) => se_Polygon(_),
    });
};
const se_RegionsOfInterest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RegionOfInterest(entry);
    });
};
const se_SearchFacesByImageRequest = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        FaceMatchThreshold: smithyClient.serializeFloat,
        Image: (_) => se_Image(_, context),
        MaxFaces: [],
        QualityFilter: [],
    });
};
const se_SearchFacesRequest = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        FaceId: [],
        FaceMatchThreshold: smithyClient.serializeFloat,
        MaxFaces: [],
    });
};
const se_SearchUsersByImageRequest = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        Image: (_) => se_Image(_, context),
        MaxUsers: [],
        QualityFilter: [],
        UserMatchThreshold: smithyClient.serializeFloat,
    });
};
const se_SearchUsersRequest = (input, context) => {
    return smithyClient.take(input, {
        CollectionId: [],
        FaceId: [],
        MaxUsers: [],
        UserId: [],
        UserMatchThreshold: smithyClient.serializeFloat,
    });
};
const se_StartContentModerationRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [],
        JobTag: [],
        MinConfidence: smithyClient.serializeFloat,
        NotificationChannel: smithyClient._json,
        Video: smithyClient._json,
    });
};
const se_StartFaceSearchRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [],
        CollectionId: [],
        FaceMatchThreshold: smithyClient.serializeFloat,
        JobTag: [],
        NotificationChannel: smithyClient._json,
        Video: smithyClient._json,
    });
};
const se_StartLabelDetectionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [],
        Features: smithyClient._json,
        JobTag: [],
        MinConfidence: smithyClient.serializeFloat,
        NotificationChannel: smithyClient._json,
        Settings: smithyClient._json,
        Video: smithyClient._json,
    });
};
const se_StartMediaAnalysisJobRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        Input: smithyClient._json,
        JobName: [],
        KmsKeyId: [],
        OperationsConfig: (_) => se_MediaAnalysisOperationsConfig(_),
        OutputConfig: smithyClient._json,
    });
};
const se_StartSegmentDetectionFilters = (input, context) => {
    return smithyClient.take(input, {
        ShotFilter: (_) => se_StartShotDetectionFilter(_),
        TechnicalCueFilter: (_) => se_StartTechnicalCueDetectionFilter(_),
    });
};
const se_StartSegmentDetectionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [],
        Filters: (_) => se_StartSegmentDetectionFilters(_),
        JobTag: [],
        NotificationChannel: smithyClient._json,
        SegmentTypes: smithyClient._json,
        Video: smithyClient._json,
    });
};
const se_StartShotDetectionFilter = (input, context) => {
    return smithyClient.take(input, {
        MinSegmentConfidence: smithyClient.serializeFloat,
    });
};
const se_StartTechnicalCueDetectionFilter = (input, context) => {
    return smithyClient.take(input, {
        BlackFrame: (_) => se_BlackFrame(_),
        MinSegmentConfidence: smithyClient.serializeFloat,
    });
};
const se_StartTextDetectionFilters = (input, context) => {
    return smithyClient.take(input, {
        RegionsOfInterest: (_) => se_RegionsOfInterest(_),
        WordFilter: (_) => se_DetectionFilter(_),
    });
};
const se_StartTextDetectionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [],
        Filters: (_) => se_StartTextDetectionFilters(_),
        JobTag: [],
        NotificationChannel: smithyClient._json,
        Video: smithyClient._json,
    });
};
const se_StreamProcessorSettings = (input, context) => {
    return smithyClient.take(input, {
        ConnectedHome: (_) => se_ConnectedHomeSettings(_),
        FaceSearch: (_) => se_FaceSearchSettings(_),
    });
};
const se_StreamProcessorSettingsForUpdate = (input, context) => {
    return smithyClient.take(input, {
        ConnectedHomeForUpdate: (_) => se_ConnectedHomeSettingsForUpdate(_),
    });
};
const se_UpdateDatasetEntriesRequest = (input, context) => {
    return smithyClient.take(input, {
        Changes: (_) => se_DatasetChanges(_, context),
        DatasetArn: [],
    });
};
const se_UpdateStreamProcessorRequest = (input, context) => {
    return smithyClient.take(input, {
        DataSharingPreferenceForUpdate: smithyClient._json,
        Name: [],
        ParametersToDelete: smithyClient._json,
        RegionsOfInterestForUpdate: (_) => se_RegionsOfInterest(_),
        SettingsForUpdate: (_) => se_StreamProcessorSettingsForUpdate(_),
    });
};
const de_AssociateFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        AssociatedFaces: smithyClient._json,
        UnsuccessfulFaceAssociations: (_) => de_UnsuccessfulFaceAssociationList(_),
        UserStatus: smithyClient.expectString,
    });
};
const de_AuditImage = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Bytes: context.base64Decoder,
        S3Object: smithyClient._json,
    });
};
const de_AuditImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuditImage(entry, context);
    });
    return retVal;
};
const de_Beard = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_BodyParts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectiveEquipmentBodyPart(entry);
    });
    return retVal;
};
const de_BoundingBox = (output, context) => {
    return smithyClient.take(output, {
        Height: smithyClient.limitedParseFloat32,
        Left: smithyClient.limitedParseFloat32,
        Top: smithyClient.limitedParseFloat32,
        Width: smithyClient.limitedParseFloat32,
    });
};
const de_Celebrity = (output, context) => {
    return smithyClient.take(output, {
        Face: (_) => de_ComparedFace(_),
        Id: smithyClient.expectString,
        KnownGender: smithyClient._json,
        MatchConfidence: smithyClient.limitedParseFloat32,
        Name: smithyClient.expectString,
        Urls: smithyClient._json,
    });
};
const de_CelebrityDetail = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        Face: (_) => de_FaceDetail(_),
        Id: smithyClient.expectString,
        KnownGender: smithyClient._json,
        Name: smithyClient.expectString,
        Urls: smithyClient._json,
    });
};
const de_CelebrityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Celebrity(entry);
    });
    return retVal;
};
const de_CelebrityRecognition = (output, context) => {
    return smithyClient.take(output, {
        Celebrity: (_) => de_CelebrityDetail(_),
        Timestamp: smithyClient.expectLong,
    });
};
const de_CelebrityRecognitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CelebrityRecognition(entry);
    });
    return retVal;
};
const de_ComparedFace = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        Emotions: (_) => de_Emotions(_),
        Landmarks: (_) => de_Landmarks(_),
        Pose: (_) => de_Pose(_),
        Quality: (_) => de_ImageQuality(_),
        Smile: (_) => de_Smile(_),
    });
};
const de_ComparedFaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComparedFace(entry);
    });
    return retVal;
};
const de_ComparedSourceImageFace = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
    });
};
const de_CompareFacesMatch = (output, context) => {
    return smithyClient.take(output, {
        Face: (_) => de_ComparedFace(_),
        Similarity: smithyClient.limitedParseFloat32,
    });
};
const de_CompareFacesMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CompareFacesMatch(entry);
    });
    return retVal;
};
const de_CompareFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceMatches: (_) => de_CompareFacesMatchList(_),
        SourceImageFace: (_) => de_ComparedSourceImageFace(_),
        SourceImageOrientationCorrection: smithyClient.expectString,
        TargetImageOrientationCorrection: smithyClient.expectString,
        UnmatchedFaces: (_) => de_CompareFacesUnmatchList(_),
    });
};
const de_CompareFacesUnmatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComparedFace(entry);
    });
    return retVal;
};
const de_ConnectedHomeSettings = (output, context) => {
    return smithyClient.take(output, {
        Labels: smithyClient._json,
        MinConfidence: smithyClient.limitedParseFloat32,
    });
};
const de_ContentModerationDetection = (output, context) => {
    return smithyClient.take(output, {
        ContentTypes: (_) => de_ContentTypes(_),
        DurationMillis: smithyClient.expectLong,
        EndTimestampMillis: smithyClient.expectLong,
        ModerationLabel: (_) => de_ModerationLabel(_),
        StartTimestampMillis: smithyClient.expectLong,
        Timestamp: smithyClient.expectLong,
    });
};
const de_ContentModerationDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContentModerationDetection(entry);
    });
    return retVal;
};
const de_ContentType = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Name: smithyClient.expectString,
    });
};
const de_ContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContentType(entry);
    });
    return retVal;
};
const de_CoversBodyPart = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_CustomizationFeatureConfig = (output, context) => {
    return smithyClient.take(output, {
        ContentModeration: (_) => de_CustomizationFeatureContentModerationConfig(_),
    });
};
const de_CustomizationFeatureContentModerationConfig = (output, context) => {
    return smithyClient.take(output, {
        ConfidenceThreshold: smithyClient.limitedParseFloat32,
    });
};
const de_CustomLabel = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Geometry: (_) => de_Geometry(_),
        Name: smithyClient.expectString,
    });
};
const de_CustomLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomLabel(entry);
    });
    return retVal;
};
const de_DatasetDescription = (output, context) => {
    return smithyClient.take(output, {
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DatasetStats: smithyClient._json,
        LastUpdatedTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        StatusMessageCode: smithyClient.expectString,
    });
};
const de_DatasetMetadata = (output, context) => {
    return smithyClient.take(output, {
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DatasetArn: smithyClient.expectString,
        DatasetType: smithyClient.expectString,
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        StatusMessageCode: smithyClient.expectString,
    });
};
const de_DatasetMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetMetadata(entry);
    });
    return retVal;
};
const de_DescribeCollectionResponse = (output, context) => {
    return smithyClient.take(output, {
        CollectionARN: smithyClient.expectString,
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FaceCount: smithyClient.expectLong,
        FaceModelVersion: smithyClient.expectString,
        UserCount: smithyClient.expectLong,
    });
};
const de_DescribeDatasetResponse = (output, context) => {
    return smithyClient.take(output, {
        DatasetDescription: (_) => de_DatasetDescription(_),
    });
};
const de_DescribeProjectsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ProjectDescriptions: (_) => de_ProjectDescriptions(_),
    });
};
const de_DescribeProjectVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ProjectVersionDescriptions: (_) => de_ProjectVersionDescriptions(_),
    });
};
const de_DescribeStreamProcessorResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataSharingPreference: smithyClient._json,
        Input: smithyClient._json,
        KmsKeyId: smithyClient.expectString,
        LastUpdateTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        NotificationChannel: smithyClient._json,
        Output: smithyClient._json,
        RegionsOfInterest: (_) => de_RegionsOfInterest(_),
        RoleArn: smithyClient.expectString,
        Settings: (_) => de_StreamProcessorSettings(_),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        StreamProcessorArn: smithyClient.expectString,
    });
};
const de_DetectCustomLabelsResponse = (output, context) => {
    return smithyClient.take(output, {
        CustomLabels: (_) => de_CustomLabels(_),
    });
};
const de_DetectFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceDetails: (_) => de_FaceDetailList(_),
        OrientationCorrection: smithyClient.expectString,
    });
};
const de_DetectLabelsImageBackground = (output, context) => {
    return smithyClient.take(output, {
        DominantColors: (_) => de_DominantColors(_),
        Quality: (_) => de_DetectLabelsImageQuality(_),
    });
};
const de_DetectLabelsImageForeground = (output, context) => {
    return smithyClient.take(output, {
        DominantColors: (_) => de_DominantColors(_),
        Quality: (_) => de_DetectLabelsImageQuality(_),
    });
};
const de_DetectLabelsImageProperties = (output, context) => {
    return smithyClient.take(output, {
        Background: (_) => de_DetectLabelsImageBackground(_),
        DominantColors: (_) => de_DominantColors(_),
        Foreground: (_) => de_DetectLabelsImageForeground(_),
        Quality: (_) => de_DetectLabelsImageQuality(_),
    });
};
const de_DetectLabelsImageQuality = (output, context) => {
    return smithyClient.take(output, {
        Brightness: smithyClient.limitedParseFloat32,
        Contrast: smithyClient.limitedParseFloat32,
        Sharpness: smithyClient.limitedParseFloat32,
    });
};
const de_DetectLabelsResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageProperties: (_) => de_DetectLabelsImageProperties(_),
        LabelModelVersion: smithyClient.expectString,
        Labels: (_) => de_Labels(_),
        OrientationCorrection: smithyClient.expectString,
    });
};
const de_DetectModerationLabelsResponse = (output, context) => {
    return smithyClient.take(output, {
        ContentTypes: (_) => de_ContentTypes(_),
        HumanLoopActivationOutput: (_) => de_HumanLoopActivationOutput(_),
        ModerationLabels: (_) => de_ModerationLabels(_),
        ModerationModelVersion: smithyClient.expectString,
        ProjectVersion: smithyClient.expectString,
    });
};
const de_DetectProtectiveEquipmentResponse = (output, context) => {
    return smithyClient.take(output, {
        Persons: (_) => de_ProtectiveEquipmentPersons(_),
        ProtectiveEquipmentModelVersion: smithyClient.expectString,
        Summary: smithyClient._json,
    });
};
const de_DetectTextResponse = (output, context) => {
    return smithyClient.take(output, {
        TextDetections: (_) => de_TextDetectionList(_),
        TextModelVersion: smithyClient.expectString,
    });
};
const de_DominantColor = (output, context) => {
    return smithyClient.take(output, {
        Blue: smithyClient.expectInt32,
        CSSColor: smithyClient.expectString,
        Green: smithyClient.expectInt32,
        HexCode: smithyClient.expectString,
        PixelPercent: smithyClient.limitedParseFloat32,
        Red: smithyClient.expectInt32,
        SimplifiedColor: smithyClient.expectString,
    });
};
const de_DominantColors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DominantColor(entry);
    });
    return retVal;
};
const de_Emotion = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Type: smithyClient.expectString,
    });
};
const de_Emotions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Emotion(entry);
    });
    return retVal;
};
const de_EquipmentDetection = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        CoversBodyPart: (_) => de_CoversBodyPart(_),
        Type: smithyClient.expectString,
    });
};
const de_EquipmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EquipmentDetection(entry);
    });
    return retVal;
};
const de_EvaluationResult = (output, context) => {
    return smithyClient.take(output, {
        F1Score: smithyClient.limitedParseFloat32,
        Summary: smithyClient._json,
    });
};
const de_EyeDirection = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Pitch: smithyClient.limitedParseFloat32,
        Yaw: smithyClient.limitedParseFloat32,
    });
};
const de_Eyeglasses = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_EyeOpen = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_Face = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        ExternalImageId: smithyClient.expectString,
        FaceId: smithyClient.expectString,
        ImageId: smithyClient.expectString,
        IndexFacesModelVersion: smithyClient.expectString,
        UserId: smithyClient.expectString,
    });
};
const de_FaceDetail = (output, context) => {
    return smithyClient.take(output, {
        AgeRange: smithyClient._json,
        Beard: (_) => de_Beard(_),
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        Emotions: (_) => de_Emotions(_),
        EyeDirection: (_) => de_EyeDirection(_),
        Eyeglasses: (_) => de_Eyeglasses(_),
        EyesOpen: (_) => de_EyeOpen(_),
        FaceOccluded: (_) => de_FaceOccluded(_),
        Gender: (_) => de_Gender(_),
        Landmarks: (_) => de_Landmarks(_),
        MouthOpen: (_) => de_MouthOpen(_),
        Mustache: (_) => de_Mustache(_),
        Pose: (_) => de_Pose(_),
        Quality: (_) => de_ImageQuality(_),
        Smile: (_) => de_Smile(_),
        Sunglasses: (_) => de_Sunglasses(_),
    });
};
const de_FaceDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceDetail(entry);
    });
    return retVal;
};
const de_FaceDetection = (output, context) => {
    return smithyClient.take(output, {
        Face: (_) => de_FaceDetail(_),
        Timestamp: smithyClient.expectLong,
    });
};
const de_FaceDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceDetection(entry);
    });
    return retVal;
};
const de_FaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Face(entry);
    });
    return retVal;
};
const de_FaceMatch = (output, context) => {
    return smithyClient.take(output, {
        Face: (_) => de_Face(_),
        Similarity: smithyClient.limitedParseFloat32,
    });
};
const de_FaceMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceMatch(entry);
    });
    return retVal;
};
const de_FaceOccluded = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_FaceRecord = (output, context) => {
    return smithyClient.take(output, {
        Face: (_) => de_Face(_),
        FaceDetail: (_) => de_FaceDetail(_),
    });
};
const de_FaceRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceRecord(entry);
    });
    return retVal;
};
const de_FaceSearchSettings = (output, context) => {
    return smithyClient.take(output, {
        CollectionId: smithyClient.expectString,
        FaceMatchThreshold: smithyClient.limitedParseFloat32,
    });
};
const de_Gender = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectString,
    });
};
const de_Geometry = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Polygon: (_) => de_Polygon(_),
    });
};
const de_GetCelebrityRecognitionResponse = (output, context) => {
    return smithyClient.take(output, {
        Celebrities: (_) => de_CelebrityRecognitions(_),
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetContentModerationResponse = (output, context) => {
    return smithyClient.take(output, {
        GetRequestMetadata: smithyClient._json,
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        ModerationLabels: (_) => de_ContentModerationDetections(_),
        ModerationModelVersion: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetFaceDetectionResponse = (output, context) => {
    return smithyClient.take(output, {
        Faces: (_) => de_FaceDetections(_),
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetFaceLivenessSessionResultsResponse = (output, context) => {
    return smithyClient.take(output, {
        AuditImages: (_) => de_AuditImages(_, context),
        Challenge: smithyClient._json,
        Confidence: smithyClient.limitedParseFloat32,
        ReferenceImage: (_) => de_AuditImage(_, context),
        SessionId: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_GetFaceSearchResponse = (output, context) => {
    return smithyClient.take(output, {
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        Persons: (_) => de_PersonMatches(_),
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetLabelDetectionResponse = (output, context) => {
    return smithyClient.take(output, {
        GetRequestMetadata: smithyClient._json,
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        LabelModelVersion: smithyClient.expectString,
        Labels: (_) => de_LabelDetections(_),
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetMediaAnalysisJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CompletionTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureDetails: smithyClient._json,
        Input: smithyClient._json,
        JobId: smithyClient.expectString,
        JobName: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        ManifestSummary: smithyClient._json,
        OperationsConfig: (_) => de_MediaAnalysisOperationsConfig(_),
        OutputConfig: smithyClient._json,
        Results: smithyClient._json,
        Status: smithyClient.expectString,
    });
};
const de_GetPersonTrackingResponse = (output, context) => {
    return smithyClient.take(output, {
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        Persons: (_) => de_PersonDetections(_),
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_GetSegmentDetectionResponse = (output, context) => {
    return smithyClient.take(output, {
        AudioMetadata: smithyClient._json,
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        Segments: (_) => de_SegmentDetections(_),
        SelectedSegmentTypes: smithyClient._json,
        StatusMessage: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadataList(_),
    });
};
const de_GetTextDetectionResponse = (output, context) => {
    return smithyClient.take(output, {
        JobId: smithyClient.expectString,
        JobStatus: smithyClient.expectString,
        JobTag: smithyClient.expectString,
        NextToken: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        TextDetections: (_) => de_TextDetectionResults(_),
        TextModelVersion: smithyClient.expectString,
        Video: smithyClient._json,
        VideoMetadata: (_) => de_VideoMetadata(_),
    });
};
const de_HumanLoopActivationOutput = (output, context) => {
    return smithyClient.take(output, {
        HumanLoopActivationConditionsEvaluationResults: smithyClient.LazyJsonString.from,
        HumanLoopActivationReasons: smithyClient._json,
        HumanLoopArn: smithyClient.expectString,
    });
};
const de_ImageQuality = (output, context) => {
    return smithyClient.take(output, {
        Brightness: smithyClient.limitedParseFloat32,
        Sharpness: smithyClient.limitedParseFloat32,
    });
};
const de_IndexFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceModelVersion: smithyClient.expectString,
        FaceRecords: (_) => de_FaceRecordList(_),
        OrientationCorrection: smithyClient.expectString,
        UnindexedFaces: (_) => de_UnindexedFaces(_),
    });
};
const de_Instance = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        DominantColors: (_) => de_DominantColors(_),
    });
};
const de_Instances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry);
    });
    return retVal;
};
const de_Label = (output, context) => {
    return smithyClient.take(output, {
        Aliases: smithyClient._json,
        Categories: smithyClient._json,
        Confidence: smithyClient.limitedParseFloat32,
        Instances: (_) => de_Instances(_),
        Name: smithyClient.expectString,
        Parents: smithyClient._json,
    });
};
const de_LabelDetection = (output, context) => {
    return smithyClient.take(output, {
        DurationMillis: smithyClient.expectLong,
        EndTimestampMillis: smithyClient.expectLong,
        Label: (_) => de_Label(_),
        StartTimestampMillis: smithyClient.expectLong,
        Timestamp: smithyClient.expectLong,
    });
};
const de_LabelDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelDetection(entry);
    });
    return retVal;
};
const de_Labels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Label(entry);
    });
    return retVal;
};
const de_Landmark = (output, context) => {
    return smithyClient.take(output, {
        Type: smithyClient.expectString,
        X: smithyClient.limitedParseFloat32,
        Y: smithyClient.limitedParseFloat32,
    });
};
const de_Landmarks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Landmark(entry);
    });
    return retVal;
};
const de_ListFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceModelVersion: smithyClient.expectString,
        Faces: (_) => de_FaceList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMediaAnalysisJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        MediaAnalysisJobs: (_) => de_MediaAnalysisJobDescriptions(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListProjectPoliciesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ProjectPolicies: (_) => de_ProjectPolicies(_),
    });
};
const de_MediaAnalysisDetectModerationLabelsConfig = (output, context) => {
    return smithyClient.take(output, {
        MinConfidence: smithyClient.limitedParseFloat32,
        ProjectVersion: smithyClient.expectString,
    });
};
const de_MediaAnalysisJobDescription = (output, context) => {
    return smithyClient.take(output, {
        CompletionTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureDetails: smithyClient._json,
        Input: smithyClient._json,
        JobId: smithyClient.expectString,
        JobName: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        ManifestSummary: smithyClient._json,
        OperationsConfig: (_) => de_MediaAnalysisOperationsConfig(_),
        OutputConfig: smithyClient._json,
        Results: smithyClient._json,
        Status: smithyClient.expectString,
    });
};
const de_MediaAnalysisJobDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaAnalysisJobDescription(entry);
    });
    return retVal;
};
const de_MediaAnalysisOperationsConfig = (output, context) => {
    return smithyClient.take(output, {
        DetectModerationLabels: (_) => de_MediaAnalysisDetectModerationLabelsConfig(_),
    });
};
const de_ModerationLabel = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Name: smithyClient.expectString,
        ParentName: smithyClient.expectString,
        TaxonomyLevel: smithyClient.expectInt32,
    });
};
const de_ModerationLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModerationLabel(entry);
    });
    return retVal;
};
const de_MouthOpen = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_Mustache = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_PersonDetail = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Face: (_) => de_FaceDetail(_),
        Index: smithyClient.expectLong,
    });
};
const de_PersonDetection = (output, context) => {
    return smithyClient.take(output, {
        Person: (_) => de_PersonDetail(_),
        Timestamp: smithyClient.expectLong,
    });
};
const de_PersonDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PersonDetection(entry);
    });
    return retVal;
};
const de_PersonMatch = (output, context) => {
    return smithyClient.take(output, {
        FaceMatches: (_) => de_FaceMatchList(_),
        Person: (_) => de_PersonDetail(_),
        Timestamp: smithyClient.expectLong,
    });
};
const de_PersonMatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PersonMatch(entry);
    });
    return retVal;
};
const de_Point = (output, context) => {
    return smithyClient.take(output, {
        X: smithyClient.limitedParseFloat32,
        Y: smithyClient.limitedParseFloat32,
    });
};
const de_Polygon = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Point(entry);
    });
    return retVal;
};
const de_Pose = (output, context) => {
    return smithyClient.take(output, {
        Pitch: smithyClient.limitedParseFloat32,
        Roll: smithyClient.limitedParseFloat32,
        Yaw: smithyClient.limitedParseFloat32,
    });
};
const de_ProjectDescription = (output, context) => {
    return smithyClient.take(output, {
        AutoUpdate: smithyClient.expectString,
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Datasets: (_) => de_DatasetMetadataList(_),
        Feature: smithyClient.expectString,
        ProjectArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ProjectDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectDescription(entry);
    });
    return retVal;
};
const de_ProjectPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectPolicy(entry);
    });
    return retVal;
};
const de_ProjectPolicy = (output, context) => {
    return smithyClient.take(output, {
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastUpdatedTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PolicyDocument: smithyClient.expectString,
        PolicyName: smithyClient.expectString,
        PolicyRevisionId: smithyClient.expectString,
        ProjectArn: smithyClient.expectString,
    });
};
const de_ProjectVersionDescription = (output, context) => {
    return smithyClient.take(output, {
        BaseModelVersion: smithyClient.expectString,
        BillableTrainingTimeInSeconds: smithyClient.expectLong,
        CreationTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EvaluationResult: (_) => de_EvaluationResult(_),
        Feature: smithyClient.expectString,
        FeatureConfig: (_) => de_CustomizationFeatureConfig(_),
        KmsKeyId: smithyClient.expectString,
        ManifestSummary: smithyClient._json,
        MaxInferenceUnits: smithyClient.expectInt32,
        MinInferenceUnits: smithyClient.expectInt32,
        OutputConfig: smithyClient._json,
        ProjectVersionArn: smithyClient.expectString,
        SourceProjectVersionArn: smithyClient.expectString,
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        TestingDataResult: smithyClient._json,
        TrainingDataResult: smithyClient._json,
        TrainingEndTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        VersionDescription: smithyClient.expectString,
    });
};
const de_ProjectVersionDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectVersionDescription(entry);
    });
    return retVal;
};
const de_ProtectiveEquipmentBodyPart = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        EquipmentDetections: (_) => de_EquipmentDetections(_),
        Name: smithyClient.expectString,
    });
};
const de_ProtectiveEquipmentPerson = (output, context) => {
    return smithyClient.take(output, {
        BodyParts: (_) => de_BodyParts(_),
        BoundingBox: (_) => de_BoundingBox(_),
        Confidence: smithyClient.limitedParseFloat32,
        Id: smithyClient.expectInt32,
    });
};
const de_ProtectiveEquipmentPersons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectiveEquipmentPerson(entry);
    });
    return retVal;
};
const de_RecognizeCelebritiesResponse = (output, context) => {
    return smithyClient.take(output, {
        CelebrityFaces: (_) => de_CelebrityList(_),
        OrientationCorrection: smithyClient.expectString,
        UnrecognizedFaces: (_) => de_ComparedFaceList(_),
    });
};
const de_RegionOfInterest = (output, context) => {
    return smithyClient.take(output, {
        BoundingBox: (_) => de_BoundingBox(_),
        Polygon: (_) => de_Polygon(_),
    });
};
const de_RegionsOfInterest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegionOfInterest(entry);
    });
    return retVal;
};
const de_SearchedFaceDetails = (output, context) => {
    return smithyClient.take(output, {
        FaceDetail: (_) => de_FaceDetail(_),
    });
};
const de_SearchFacesByImageResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceMatches: (_) => de_FaceMatchList(_),
        FaceModelVersion: smithyClient.expectString,
        SearchedFaceBoundingBox: (_) => de_BoundingBox(_),
        SearchedFaceConfidence: smithyClient.limitedParseFloat32,
    });
};
const de_SearchFacesResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceMatches: (_) => de_FaceMatchList(_),
        FaceModelVersion: smithyClient.expectString,
        SearchedFaceId: smithyClient.expectString,
    });
};
const de_SearchUsersByImageResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceModelVersion: smithyClient.expectString,
        SearchedFace: (_) => de_SearchedFaceDetails(_),
        UnsearchedFaces: (_) => de_UnsearchedFacesList(_),
        UserMatches: (_) => de_UserMatchList(_),
    });
};
const de_SearchUsersResponse = (output, context) => {
    return smithyClient.take(output, {
        FaceModelVersion: smithyClient.expectString,
        SearchedFace: smithyClient._json,
        SearchedUser: smithyClient._json,
        UserMatches: (_) => de_UserMatchList(_),
    });
};
const de_SegmentDetection = (output, context) => {
    return smithyClient.take(output, {
        DurationFrames: smithyClient.expectLong,
        DurationMillis: smithyClient.expectLong,
        DurationSMPTE: smithyClient.expectString,
        EndFrameNumber: smithyClient.expectLong,
        EndTimecodeSMPTE: smithyClient.expectString,
        EndTimestampMillis: smithyClient.expectLong,
        ShotSegment: (_) => de_ShotSegment(_),
        StartFrameNumber: smithyClient.expectLong,
        StartTimecodeSMPTE: smithyClient.expectString,
        StartTimestampMillis: smithyClient.expectLong,
        TechnicalCueSegment: (_) => de_TechnicalCueSegment(_),
        Type: smithyClient.expectString,
    });
};
const de_SegmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SegmentDetection(entry);
    });
    return retVal;
};
const de_ShotSegment = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Index: smithyClient.expectLong,
    });
};
const de_Smile = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_StreamProcessorSettings = (output, context) => {
    return smithyClient.take(output, {
        ConnectedHome: (_) => de_ConnectedHomeSettings(_),
        FaceSearch: (_) => de_FaceSearchSettings(_),
    });
};
const de_Sunglasses = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Value: smithyClient.expectBoolean,
    });
};
const de_TechnicalCueSegment = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        Type: smithyClient.expectString,
    });
};
const de_TextDetection = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        DetectedText: smithyClient.expectString,
        Geometry: (_) => de_Geometry(_),
        Id: smithyClient.expectInt32,
        ParentId: smithyClient.expectInt32,
        Type: smithyClient.expectString,
    });
};
const de_TextDetectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextDetection(entry);
    });
    return retVal;
};
const de_TextDetectionResult = (output, context) => {
    return smithyClient.take(output, {
        TextDetection: (_) => de_TextDetection(_),
        Timestamp: smithyClient.expectLong,
    });
};
const de_TextDetectionResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextDetectionResult(entry);
    });
    return retVal;
};
const de_UnindexedFace = (output, context) => {
    return smithyClient.take(output, {
        FaceDetail: (_) => de_FaceDetail(_),
        Reasons: smithyClient._json,
    });
};
const de_UnindexedFaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnindexedFace(entry);
    });
    return retVal;
};
const de_UnsearchedFace = (output, context) => {
    return smithyClient.take(output, {
        FaceDetails: (_) => de_FaceDetail(_),
        Reasons: smithyClient._json,
    });
};
const de_UnsearchedFacesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsearchedFace(entry);
    });
    return retVal;
};
const de_UnsuccessfulFaceAssociation = (output, context) => {
    return smithyClient.take(output, {
        Confidence: smithyClient.limitedParseFloat32,
        FaceId: smithyClient.expectString,
        Reasons: smithyClient._json,
        UserId: smithyClient.expectString,
    });
};
const de_UnsuccessfulFaceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulFaceAssociation(entry);
    });
    return retVal;
};
const de_UserMatch = (output, context) => {
    return smithyClient.take(output, {
        Similarity: smithyClient.limitedParseFloat32,
        User: smithyClient._json,
    });
};
const de_UserMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserMatch(entry);
    });
    return retVal;
};
const de_VideoMetadata = (output, context) => {
    return smithyClient.take(output, {
        Codec: smithyClient.expectString,
        ColorRange: smithyClient.expectString,
        DurationMillis: smithyClient.expectLong,
        Format: smithyClient.expectString,
        FrameHeight: smithyClient.expectLong,
        FrameRate: smithyClient.limitedParseFloat32,
        FrameWidth: smithyClient.expectLong,
    });
};
const de_VideoMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoMetadata(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(RekognitionServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `RekognitionService.${operation}`,
    };
}

class AssociateFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "AssociateFaces", {})
    .n("RekognitionClient", "AssociateFacesCommand")
    .f(void 0, void 0)
    .ser(se_AssociateFacesCommand)
    .de(de_AssociateFacesCommand)
    .build() {
}

class CompareFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CompareFaces", {})
    .n("RekognitionClient", "CompareFacesCommand")
    .f(void 0, void 0)
    .ser(se_CompareFacesCommand)
    .de(de_CompareFacesCommand)
    .build() {
}

class CopyProjectVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CopyProjectVersion", {})
    .n("RekognitionClient", "CopyProjectVersionCommand")
    .f(void 0, void 0)
    .ser(se_CopyProjectVersionCommand)
    .de(de_CopyProjectVersionCommand)
    .build() {
}

class CreateCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateCollection", {})
    .n("RekognitionClient", "CreateCollectionCommand")
    .f(void 0, void 0)
    .ser(se_CreateCollectionCommand)
    .de(de_CreateCollectionCommand)
    .build() {
}

class CreateDatasetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateDataset", {})
    .n("RekognitionClient", "CreateDatasetCommand")
    .f(void 0, void 0)
    .ser(se_CreateDatasetCommand)
    .de(de_CreateDatasetCommand)
    .build() {
}

class CreateFaceLivenessSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateFaceLivenessSession", {})
    .n("RekognitionClient", "CreateFaceLivenessSessionCommand")
    .f(void 0, void 0)
    .ser(se_CreateFaceLivenessSessionCommand)
    .de(de_CreateFaceLivenessSessionCommand)
    .build() {
}

class CreateProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateProject", {})
    .n("RekognitionClient", "CreateProjectCommand")
    .f(void 0, void 0)
    .ser(se_CreateProjectCommand)
    .de(de_CreateProjectCommand)
    .build() {
}

class CreateProjectVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateProjectVersion", {})
    .n("RekognitionClient", "CreateProjectVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateProjectVersionCommand)
    .de(de_CreateProjectVersionCommand)
    .build() {
}

class CreateStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateStreamProcessor", {})
    .n("RekognitionClient", "CreateStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_CreateStreamProcessorCommand)
    .de(de_CreateStreamProcessorCommand)
    .build() {
}

class CreateUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "CreateUser", {})
    .n("RekognitionClient", "CreateUserCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserCommand)
    .de(de_CreateUserCommand)
    .build() {
}

class DeleteCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteCollection", {})
    .n("RekognitionClient", "DeleteCollectionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCollectionCommand)
    .de(de_DeleteCollectionCommand)
    .build() {
}

class DeleteDatasetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteDataset", {})
    .n("RekognitionClient", "DeleteDatasetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDatasetCommand)
    .de(de_DeleteDatasetCommand)
    .build() {
}

class DeleteFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteFaces", {})
    .n("RekognitionClient", "DeleteFacesCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFacesCommand)
    .de(de_DeleteFacesCommand)
    .build() {
}

class DeleteProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteProject", {})
    .n("RekognitionClient", "DeleteProjectCommand")
    .f(void 0, void 0)
    .ser(se_DeleteProjectCommand)
    .de(de_DeleteProjectCommand)
    .build() {
}

class DeleteProjectPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteProjectPolicy", {})
    .n("RekognitionClient", "DeleteProjectPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteProjectPolicyCommand)
    .de(de_DeleteProjectPolicyCommand)
    .build() {
}

class DeleteProjectVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteProjectVersion", {})
    .n("RekognitionClient", "DeleteProjectVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteProjectVersionCommand)
    .de(de_DeleteProjectVersionCommand)
    .build() {
}

class DeleteStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteStreamProcessor", {})
    .n("RekognitionClient", "DeleteStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStreamProcessorCommand)
    .de(de_DeleteStreamProcessorCommand)
    .build() {
}

class DeleteUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DeleteUser", {})
    .n("RekognitionClient", "DeleteUserCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserCommand)
    .de(de_DeleteUserCommand)
    .build() {
}

class DescribeCollectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DescribeCollection", {})
    .n("RekognitionClient", "DescribeCollectionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCollectionCommand)
    .de(de_DescribeCollectionCommand)
    .build() {
}

class DescribeDatasetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DescribeDataset", {})
    .n("RekognitionClient", "DescribeDatasetCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDatasetCommand)
    .de(de_DescribeDatasetCommand)
    .build() {
}

class DescribeProjectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DescribeProjects", {})
    .n("RekognitionClient", "DescribeProjectsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeProjectsCommand)
    .de(de_DescribeProjectsCommand)
    .build() {
}

class DescribeProjectVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DescribeProjectVersions", {})
    .n("RekognitionClient", "DescribeProjectVersionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeProjectVersionsCommand)
    .de(de_DescribeProjectVersionsCommand)
    .build() {
}

class DescribeStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DescribeStreamProcessor", {})
    .n("RekognitionClient", "DescribeStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStreamProcessorCommand)
    .de(de_DescribeStreamProcessorCommand)
    .build() {
}

class DetectCustomLabelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectCustomLabels", {})
    .n("RekognitionClient", "DetectCustomLabelsCommand")
    .f(void 0, void 0)
    .ser(se_DetectCustomLabelsCommand)
    .de(de_DetectCustomLabelsCommand)
    .build() {
}

class DetectFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectFaces", {})
    .n("RekognitionClient", "DetectFacesCommand")
    .f(void 0, void 0)
    .ser(se_DetectFacesCommand)
    .de(de_DetectFacesCommand)
    .build() {
}

class DetectLabelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectLabels", {})
    .n("RekognitionClient", "DetectLabelsCommand")
    .f(void 0, void 0)
    .ser(se_DetectLabelsCommand)
    .de(de_DetectLabelsCommand)
    .build() {
}

class DetectModerationLabelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectModerationLabels", {})
    .n("RekognitionClient", "DetectModerationLabelsCommand")
    .f(void 0, void 0)
    .ser(se_DetectModerationLabelsCommand)
    .de(de_DetectModerationLabelsCommand)
    .build() {
}

class DetectProtectiveEquipmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectProtectiveEquipment", {})
    .n("RekognitionClient", "DetectProtectiveEquipmentCommand")
    .f(void 0, void 0)
    .ser(se_DetectProtectiveEquipmentCommand)
    .de(de_DetectProtectiveEquipmentCommand)
    .build() {
}

class DetectTextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DetectText", {})
    .n("RekognitionClient", "DetectTextCommand")
    .f(void 0, void 0)
    .ser(se_DetectTextCommand)
    .de(de_DetectTextCommand)
    .build() {
}

class DisassociateFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DisassociateFaces", {})
    .n("RekognitionClient", "DisassociateFacesCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateFacesCommand)
    .de(de_DisassociateFacesCommand)
    .build() {
}

class DistributeDatasetEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "DistributeDatasetEntries", {})
    .n("RekognitionClient", "DistributeDatasetEntriesCommand")
    .f(void 0, void 0)
    .ser(se_DistributeDatasetEntriesCommand)
    .de(de_DistributeDatasetEntriesCommand)
    .build() {
}

class GetCelebrityInfoCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetCelebrityInfo", {})
    .n("RekognitionClient", "GetCelebrityInfoCommand")
    .f(void 0, void 0)
    .ser(se_GetCelebrityInfoCommand)
    .de(de_GetCelebrityInfoCommand)
    .build() {
}

class GetCelebrityRecognitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetCelebrityRecognition", {})
    .n("RekognitionClient", "GetCelebrityRecognitionCommand")
    .f(void 0, void 0)
    .ser(se_GetCelebrityRecognitionCommand)
    .de(de_GetCelebrityRecognitionCommand)
    .build() {
}

class GetContentModerationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetContentModeration", {})
    .n("RekognitionClient", "GetContentModerationCommand")
    .f(void 0, void 0)
    .ser(se_GetContentModerationCommand)
    .de(de_GetContentModerationCommand)
    .build() {
}

class GetFaceDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetFaceDetection", {})
    .n("RekognitionClient", "GetFaceDetectionCommand")
    .f(void 0, void 0)
    .ser(se_GetFaceDetectionCommand)
    .de(de_GetFaceDetectionCommand)
    .build() {
}

class GetFaceLivenessSessionResultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetFaceLivenessSessionResults", {})
    .n("RekognitionClient", "GetFaceLivenessSessionResultsCommand")
    .f(void 0, GetFaceLivenessSessionResultsResponseFilterSensitiveLog)
    .ser(se_GetFaceLivenessSessionResultsCommand)
    .de(de_GetFaceLivenessSessionResultsCommand)
    .build() {
}

class GetFaceSearchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetFaceSearch", {})
    .n("RekognitionClient", "GetFaceSearchCommand")
    .f(void 0, void 0)
    .ser(se_GetFaceSearchCommand)
    .de(de_GetFaceSearchCommand)
    .build() {
}

class GetLabelDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetLabelDetection", {})
    .n("RekognitionClient", "GetLabelDetectionCommand")
    .f(void 0, void 0)
    .ser(se_GetLabelDetectionCommand)
    .de(de_GetLabelDetectionCommand)
    .build() {
}

class GetMediaAnalysisJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetMediaAnalysisJob", {})
    .n("RekognitionClient", "GetMediaAnalysisJobCommand")
    .f(void 0, void 0)
    .ser(se_GetMediaAnalysisJobCommand)
    .de(de_GetMediaAnalysisJobCommand)
    .build() {
}

class GetPersonTrackingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetPersonTracking", {})
    .n("RekognitionClient", "GetPersonTrackingCommand")
    .f(void 0, void 0)
    .ser(se_GetPersonTrackingCommand)
    .de(de_GetPersonTrackingCommand)
    .build() {
}

class GetSegmentDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetSegmentDetection", {})
    .n("RekognitionClient", "GetSegmentDetectionCommand")
    .f(void 0, void 0)
    .ser(se_GetSegmentDetectionCommand)
    .de(de_GetSegmentDetectionCommand)
    .build() {
}

class GetTextDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "GetTextDetection", {})
    .n("RekognitionClient", "GetTextDetectionCommand")
    .f(void 0, void 0)
    .ser(se_GetTextDetectionCommand)
    .de(de_GetTextDetectionCommand)
    .build() {
}

class IndexFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "IndexFaces", {})
    .n("RekognitionClient", "IndexFacesCommand")
    .f(void 0, void 0)
    .ser(se_IndexFacesCommand)
    .de(de_IndexFacesCommand)
    .build() {
}

class ListCollectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListCollections", {})
    .n("RekognitionClient", "ListCollectionsCommand")
    .f(void 0, void 0)
    .ser(se_ListCollectionsCommand)
    .de(de_ListCollectionsCommand)
    .build() {
}

class ListDatasetEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListDatasetEntries", {})
    .n("RekognitionClient", "ListDatasetEntriesCommand")
    .f(void 0, void 0)
    .ser(se_ListDatasetEntriesCommand)
    .de(de_ListDatasetEntriesCommand)
    .build() {
}

class ListDatasetLabelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListDatasetLabels", {})
    .n("RekognitionClient", "ListDatasetLabelsCommand")
    .f(void 0, void 0)
    .ser(se_ListDatasetLabelsCommand)
    .de(de_ListDatasetLabelsCommand)
    .build() {
}

class ListFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListFaces", {})
    .n("RekognitionClient", "ListFacesCommand")
    .f(void 0, void 0)
    .ser(se_ListFacesCommand)
    .de(de_ListFacesCommand)
    .build() {
}

class ListMediaAnalysisJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListMediaAnalysisJobs", {})
    .n("RekognitionClient", "ListMediaAnalysisJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListMediaAnalysisJobsCommand)
    .de(de_ListMediaAnalysisJobsCommand)
    .build() {
}

class ListProjectPoliciesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListProjectPolicies", {})
    .n("RekognitionClient", "ListProjectPoliciesCommand")
    .f(void 0, void 0)
    .ser(se_ListProjectPoliciesCommand)
    .de(de_ListProjectPoliciesCommand)
    .build() {
}

class ListStreamProcessorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListStreamProcessors", {})
    .n("RekognitionClient", "ListStreamProcessorsCommand")
    .f(void 0, void 0)
    .ser(se_ListStreamProcessorsCommand)
    .de(de_ListStreamProcessorsCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListTagsForResource", {})
    .n("RekognitionClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListUsersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "ListUsers", {})
    .n("RekognitionClient", "ListUsersCommand")
    .f(void 0, void 0)
    .ser(se_ListUsersCommand)
    .de(de_ListUsersCommand)
    .build() {
}

class PutProjectPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "PutProjectPolicy", {})
    .n("RekognitionClient", "PutProjectPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutProjectPolicyCommand)
    .de(de_PutProjectPolicyCommand)
    .build() {
}

class RecognizeCelebritiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "RecognizeCelebrities", {})
    .n("RekognitionClient", "RecognizeCelebritiesCommand")
    .f(void 0, void 0)
    .ser(se_RecognizeCelebritiesCommand)
    .de(de_RecognizeCelebritiesCommand)
    .build() {
}

class SearchFacesByImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "SearchFacesByImage", {})
    .n("RekognitionClient", "SearchFacesByImageCommand")
    .f(void 0, void 0)
    .ser(se_SearchFacesByImageCommand)
    .de(de_SearchFacesByImageCommand)
    .build() {
}

class SearchFacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "SearchFaces", {})
    .n("RekognitionClient", "SearchFacesCommand")
    .f(void 0, void 0)
    .ser(se_SearchFacesCommand)
    .de(de_SearchFacesCommand)
    .build() {
}

class SearchUsersByImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "SearchUsersByImage", {})
    .n("RekognitionClient", "SearchUsersByImageCommand")
    .f(void 0, void 0)
    .ser(se_SearchUsersByImageCommand)
    .de(de_SearchUsersByImageCommand)
    .build() {
}

class SearchUsersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "SearchUsers", {})
    .n("RekognitionClient", "SearchUsersCommand")
    .f(void 0, void 0)
    .ser(se_SearchUsersCommand)
    .de(de_SearchUsersCommand)
    .build() {
}

class StartCelebrityRecognitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartCelebrityRecognition", {})
    .n("RekognitionClient", "StartCelebrityRecognitionCommand")
    .f(void 0, void 0)
    .ser(se_StartCelebrityRecognitionCommand)
    .de(de_StartCelebrityRecognitionCommand)
    .build() {
}

class StartContentModerationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartContentModeration", {})
    .n("RekognitionClient", "StartContentModerationCommand")
    .f(void 0, void 0)
    .ser(se_StartContentModerationCommand)
    .de(de_StartContentModerationCommand)
    .build() {
}

class StartFaceDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartFaceDetection", {})
    .n("RekognitionClient", "StartFaceDetectionCommand")
    .f(void 0, void 0)
    .ser(se_StartFaceDetectionCommand)
    .de(de_StartFaceDetectionCommand)
    .build() {
}

class StartFaceSearchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartFaceSearch", {})
    .n("RekognitionClient", "StartFaceSearchCommand")
    .f(void 0, void 0)
    .ser(se_StartFaceSearchCommand)
    .de(de_StartFaceSearchCommand)
    .build() {
}

class StartLabelDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartLabelDetection", {})
    .n("RekognitionClient", "StartLabelDetectionCommand")
    .f(void 0, void 0)
    .ser(se_StartLabelDetectionCommand)
    .de(de_StartLabelDetectionCommand)
    .build() {
}

class StartMediaAnalysisJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartMediaAnalysisJob", {})
    .n("RekognitionClient", "StartMediaAnalysisJobCommand")
    .f(void 0, void 0)
    .ser(se_StartMediaAnalysisJobCommand)
    .de(de_StartMediaAnalysisJobCommand)
    .build() {
}

class StartPersonTrackingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartPersonTracking", {})
    .n("RekognitionClient", "StartPersonTrackingCommand")
    .f(void 0, void 0)
    .ser(se_StartPersonTrackingCommand)
    .de(de_StartPersonTrackingCommand)
    .build() {
}

class StartProjectVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartProjectVersion", {})
    .n("RekognitionClient", "StartProjectVersionCommand")
    .f(void 0, void 0)
    .ser(se_StartProjectVersionCommand)
    .de(de_StartProjectVersionCommand)
    .build() {
}

class StartSegmentDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartSegmentDetection", {})
    .n("RekognitionClient", "StartSegmentDetectionCommand")
    .f(void 0, void 0)
    .ser(se_StartSegmentDetectionCommand)
    .de(de_StartSegmentDetectionCommand)
    .build() {
}

class StartStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartStreamProcessor", {})
    .n("RekognitionClient", "StartStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_StartStreamProcessorCommand)
    .de(de_StartStreamProcessorCommand)
    .build() {
}

class StartTextDetectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StartTextDetection", {})
    .n("RekognitionClient", "StartTextDetectionCommand")
    .f(void 0, void 0)
    .ser(se_StartTextDetectionCommand)
    .de(de_StartTextDetectionCommand)
    .build() {
}

class StopProjectVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StopProjectVersion", {})
    .n("RekognitionClient", "StopProjectVersionCommand")
    .f(void 0, void 0)
    .ser(se_StopProjectVersionCommand)
    .de(de_StopProjectVersionCommand)
    .build() {
}

class StopStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "StopStreamProcessor", {})
    .n("RekognitionClient", "StopStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_StopStreamProcessorCommand)
    .de(de_StopStreamProcessorCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "TagResource", {})
    .n("RekognitionClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "UntagResource", {})
    .n("RekognitionClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateDatasetEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "UpdateDatasetEntries", {})
    .n("RekognitionClient", "UpdateDatasetEntriesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDatasetEntriesCommand)
    .de(de_UpdateDatasetEntriesCommand)
    .build() {
}

class UpdateStreamProcessorCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("RekognitionService", "UpdateStreamProcessor", {})
    .n("RekognitionClient", "UpdateStreamProcessorCommand")
    .f(void 0, void 0)
    .ser(se_UpdateStreamProcessorCommand)
    .de(de_UpdateStreamProcessorCommand)
    .build() {
}

const commands = {
    AssociateFacesCommand,
    CompareFacesCommand,
    CopyProjectVersionCommand,
    CreateCollectionCommand,
    CreateDatasetCommand,
    CreateFaceLivenessSessionCommand,
    CreateProjectCommand,
    CreateProjectVersionCommand,
    CreateStreamProcessorCommand,
    CreateUserCommand,
    DeleteCollectionCommand,
    DeleteDatasetCommand,
    DeleteFacesCommand,
    DeleteProjectCommand,
    DeleteProjectPolicyCommand,
    DeleteProjectVersionCommand,
    DeleteStreamProcessorCommand,
    DeleteUserCommand,
    DescribeCollectionCommand,
    DescribeDatasetCommand,
    DescribeProjectsCommand,
    DescribeProjectVersionsCommand,
    DescribeStreamProcessorCommand,
    DetectCustomLabelsCommand,
    DetectFacesCommand,
    DetectLabelsCommand,
    DetectModerationLabelsCommand,
    DetectProtectiveEquipmentCommand,
    DetectTextCommand,
    DisassociateFacesCommand,
    DistributeDatasetEntriesCommand,
    GetCelebrityInfoCommand,
    GetCelebrityRecognitionCommand,
    GetContentModerationCommand,
    GetFaceDetectionCommand,
    GetFaceLivenessSessionResultsCommand,
    GetFaceSearchCommand,
    GetLabelDetectionCommand,
    GetMediaAnalysisJobCommand,
    GetPersonTrackingCommand,
    GetSegmentDetectionCommand,
    GetTextDetectionCommand,
    IndexFacesCommand,
    ListCollectionsCommand,
    ListDatasetEntriesCommand,
    ListDatasetLabelsCommand,
    ListFacesCommand,
    ListMediaAnalysisJobsCommand,
    ListProjectPoliciesCommand,
    ListStreamProcessorsCommand,
    ListTagsForResourceCommand,
    ListUsersCommand,
    PutProjectPolicyCommand,
    RecognizeCelebritiesCommand,
    SearchFacesCommand,
    SearchFacesByImageCommand,
    SearchUsersCommand,
    SearchUsersByImageCommand,
    StartCelebrityRecognitionCommand,
    StartContentModerationCommand,
    StartFaceDetectionCommand,
    StartFaceSearchCommand,
    StartLabelDetectionCommand,
    StartMediaAnalysisJobCommand,
    StartPersonTrackingCommand,
    StartProjectVersionCommand,
    StartSegmentDetectionCommand,
    StartStreamProcessorCommand,
    StartTextDetectionCommand,
    StopProjectVersionCommand,
    StopStreamProcessorCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateDatasetEntriesCommand,
    UpdateStreamProcessorCommand,
};
class Rekognition extends RekognitionClient {
}
smithyClient.createAggregatedClient(commands, Rekognition);

const paginateDescribeProjectVersions = core.createPaginator(RekognitionClient, DescribeProjectVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeProjects = core.createPaginator(RekognitionClient, DescribeProjectsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetCelebrityRecognition = core.createPaginator(RekognitionClient, GetCelebrityRecognitionCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetContentModeration = core.createPaginator(RekognitionClient, GetContentModerationCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetFaceDetection = core.createPaginator(RekognitionClient, GetFaceDetectionCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetFaceSearch = core.createPaginator(RekognitionClient, GetFaceSearchCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetLabelDetection = core.createPaginator(RekognitionClient, GetLabelDetectionCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetPersonTracking = core.createPaginator(RekognitionClient, GetPersonTrackingCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetSegmentDetection = core.createPaginator(RekognitionClient, GetSegmentDetectionCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTextDetection = core.createPaginator(RekognitionClient, GetTextDetectionCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCollections = core.createPaginator(RekognitionClient, ListCollectionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDatasetEntries = core.createPaginator(RekognitionClient, ListDatasetEntriesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDatasetLabels = core.createPaginator(RekognitionClient, ListDatasetLabelsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListFaces = core.createPaginator(RekognitionClient, ListFacesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMediaAnalysisJobs = core.createPaginator(RekognitionClient, ListMediaAnalysisJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListProjectPolicies = core.createPaginator(RekognitionClient, ListProjectPoliciesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStreamProcessors = core.createPaginator(RekognitionClient, ListStreamProcessorsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUsers = core.createPaginator(RekognitionClient, ListUsersCommand, "NextToken", "NextToken", "MaxResults");

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeProjectVersionsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ProjectVersionDescriptions);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "RUNNING";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ProjectVersionDescriptions);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForProjectVersionRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilProjectVersionRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeProjectVersionsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ProjectVersionDescriptions);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "TRAINING_COMPLETED";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ProjectVersionDescriptions);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "TRAINING_FAILED") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForProjectVersionTrainingCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 120, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilProjectVersionTrainingCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 120, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.AssociateFacesCommand = AssociateFacesCommand;
exports.Attribute = Attribute;
exports.AuditImageFilterSensitiveLog = AuditImageFilterSensitiveLog;
exports.BodyPart = BodyPart;
exports.CelebrityRecognitionSortBy = CelebrityRecognitionSortBy;
exports.ChallengeType = ChallengeType;
exports.CompareFacesCommand = CompareFacesCommand;
exports.ConflictException = ConflictException;
exports.ContentClassifier = ContentClassifier;
exports.ContentModerationAggregateBy = ContentModerationAggregateBy;
exports.ContentModerationSortBy = ContentModerationSortBy;
exports.CopyProjectVersionCommand = CopyProjectVersionCommand;
exports.CreateCollectionCommand = CreateCollectionCommand;
exports.CreateDatasetCommand = CreateDatasetCommand;
exports.CreateFaceLivenessSessionCommand = CreateFaceLivenessSessionCommand;
exports.CreateProjectCommand = CreateProjectCommand;
exports.CreateProjectVersionCommand = CreateProjectVersionCommand;
exports.CreateStreamProcessorCommand = CreateStreamProcessorCommand;
exports.CreateUserCommand = CreateUserCommand;
exports.CustomizationFeature = CustomizationFeature;
exports.DatasetStatus = DatasetStatus;
exports.DatasetStatusMessageCode = DatasetStatusMessageCode;
exports.DatasetType = DatasetType;
exports.DeleteCollectionCommand = DeleteCollectionCommand;
exports.DeleteDatasetCommand = DeleteDatasetCommand;
exports.DeleteFacesCommand = DeleteFacesCommand;
exports.DeleteProjectCommand = DeleteProjectCommand;
exports.DeleteProjectPolicyCommand = DeleteProjectPolicyCommand;
exports.DeleteProjectVersionCommand = DeleteProjectVersionCommand;
exports.DeleteStreamProcessorCommand = DeleteStreamProcessorCommand;
exports.DeleteUserCommand = DeleteUserCommand;
exports.DescribeCollectionCommand = DescribeCollectionCommand;
exports.DescribeDatasetCommand = DescribeDatasetCommand;
exports.DescribeProjectVersionsCommand = DescribeProjectVersionsCommand;
exports.DescribeProjectsCommand = DescribeProjectsCommand;
exports.DescribeStreamProcessorCommand = DescribeStreamProcessorCommand;
exports.DetectCustomLabelsCommand = DetectCustomLabelsCommand;
exports.DetectFacesCommand = DetectFacesCommand;
exports.DetectLabelsCommand = DetectLabelsCommand;
exports.DetectLabelsFeatureName = DetectLabelsFeatureName;
exports.DetectModerationLabelsCommand = DetectModerationLabelsCommand;
exports.DetectProtectiveEquipmentCommand = DetectProtectiveEquipmentCommand;
exports.DetectTextCommand = DetectTextCommand;
exports.DisassociateFacesCommand = DisassociateFacesCommand;
exports.DistributeDatasetEntriesCommand = DistributeDatasetEntriesCommand;
exports.EmotionName = EmotionName;
exports.FaceAttributes = FaceAttributes;
exports.FaceSearchSortBy = FaceSearchSortBy;
exports.GenderType = GenderType;
exports.GetCelebrityInfoCommand = GetCelebrityInfoCommand;
exports.GetCelebrityRecognitionCommand = GetCelebrityRecognitionCommand;
exports.GetContentModerationCommand = GetContentModerationCommand;
exports.GetFaceDetectionCommand = GetFaceDetectionCommand;
exports.GetFaceLivenessSessionResultsCommand = GetFaceLivenessSessionResultsCommand;
exports.GetFaceLivenessSessionResultsResponseFilterSensitiveLog = GetFaceLivenessSessionResultsResponseFilterSensitiveLog;
exports.GetFaceSearchCommand = GetFaceSearchCommand;
exports.GetLabelDetectionCommand = GetLabelDetectionCommand;
exports.GetMediaAnalysisJobCommand = GetMediaAnalysisJobCommand;
exports.GetPersonTrackingCommand = GetPersonTrackingCommand;
exports.GetSegmentDetectionCommand = GetSegmentDetectionCommand;
exports.GetTextDetectionCommand = GetTextDetectionCommand;
exports.HumanLoopQuotaExceededException = HumanLoopQuotaExceededException;
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
exports.ImageTooLargeException = ImageTooLargeException;
exports.IndexFacesCommand = IndexFacesCommand;
exports.InternalServerError = InternalServerError;
exports.InvalidImageFormatException = InvalidImageFormatException;
exports.InvalidManifestException = InvalidManifestException;
exports.InvalidPaginationTokenException = InvalidPaginationTokenException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidPolicyRevisionIdException = InvalidPolicyRevisionIdException;
exports.InvalidS3ObjectException = InvalidS3ObjectException;
exports.KnownGenderType = KnownGenderType;
exports.LabelDetectionAggregateBy = LabelDetectionAggregateBy;
exports.LabelDetectionFeatureName = LabelDetectionFeatureName;
exports.LabelDetectionSortBy = LabelDetectionSortBy;
exports.LandmarkType = LandmarkType;
exports.LimitExceededException = LimitExceededException;
exports.ListCollectionsCommand = ListCollectionsCommand;
exports.ListDatasetEntriesCommand = ListDatasetEntriesCommand;
exports.ListDatasetLabelsCommand = ListDatasetLabelsCommand;
exports.ListFacesCommand = ListFacesCommand;
exports.ListMediaAnalysisJobsCommand = ListMediaAnalysisJobsCommand;
exports.ListProjectPoliciesCommand = ListProjectPoliciesCommand;
exports.ListStreamProcessorsCommand = ListStreamProcessorsCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListUsersCommand = ListUsersCommand;
exports.LivenessSessionStatus = LivenessSessionStatus;
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
exports.MediaAnalysisJobFailureCode = MediaAnalysisJobFailureCode;
exports.MediaAnalysisJobStatus = MediaAnalysisJobStatus;
exports.OrientationCorrection = OrientationCorrection;
exports.PersonTrackingSortBy = PersonTrackingSortBy;
exports.ProjectAutoUpdate = ProjectAutoUpdate;
exports.ProjectStatus = ProjectStatus;
exports.ProjectVersionStatus = ProjectVersionStatus;
exports.ProtectiveEquipmentType = ProtectiveEquipmentType;
exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
exports.PutProjectPolicyCommand = PutProjectPolicyCommand;
exports.QualityFilter = QualityFilter;
exports.Reason = Reason;
exports.RecognizeCelebritiesCommand = RecognizeCelebritiesCommand;
exports.Rekognition = Rekognition;
exports.RekognitionClient = RekognitionClient;
exports.RekognitionServiceException = RekognitionServiceException;
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
exports.ResourceInUseException = ResourceInUseException;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ResourceNotReadyException = ResourceNotReadyException;
exports.SearchFacesByImageCommand = SearchFacesByImageCommand;
exports.SearchFacesCommand = SearchFacesCommand;
exports.SearchUsersByImageCommand = SearchUsersByImageCommand;
exports.SearchUsersCommand = SearchUsersCommand;
exports.SegmentType = SegmentType;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.SessionNotFoundException = SessionNotFoundException;
exports.StartCelebrityRecognitionCommand = StartCelebrityRecognitionCommand;
exports.StartContentModerationCommand = StartContentModerationCommand;
exports.StartFaceDetectionCommand = StartFaceDetectionCommand;
exports.StartFaceSearchCommand = StartFaceSearchCommand;
exports.StartLabelDetectionCommand = StartLabelDetectionCommand;
exports.StartMediaAnalysisJobCommand = StartMediaAnalysisJobCommand;
exports.StartPersonTrackingCommand = StartPersonTrackingCommand;
exports.StartProjectVersionCommand = StartProjectVersionCommand;
exports.StartSegmentDetectionCommand = StartSegmentDetectionCommand;
exports.StartStreamProcessorCommand = StartStreamProcessorCommand;
exports.StartTextDetectionCommand = StartTextDetectionCommand;
exports.StopProjectVersionCommand = StopProjectVersionCommand;
exports.StopStreamProcessorCommand = StopStreamProcessorCommand;
exports.StreamProcessorParameterToDelete = StreamProcessorParameterToDelete;
exports.StreamProcessorStatus = StreamProcessorStatus;
exports.TagResourceCommand = TagResourceCommand;
exports.TechnicalCueType = TechnicalCueType;
exports.TextTypes = TextTypes;
exports.ThrottlingException = ThrottlingException;
exports.UnsearchedFaceReason = UnsearchedFaceReason;
exports.UnsuccessfulFaceAssociationReason = UnsuccessfulFaceAssociationReason;
exports.UnsuccessfulFaceDeletionReason = UnsuccessfulFaceDeletionReason;
exports.UnsuccessfulFaceDisassociationReason = UnsuccessfulFaceDisassociationReason;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateDatasetEntriesCommand = UpdateDatasetEntriesCommand;
exports.UpdateStreamProcessorCommand = UpdateStreamProcessorCommand;
exports.UserStatus = UserStatus;
exports.VideoColorRange = VideoColorRange;
exports.VideoJobStatus = VideoJobStatus;
exports.VideoTooLargeException = VideoTooLargeException;
exports.paginateDescribeProjectVersions = paginateDescribeProjectVersions;
exports.paginateDescribeProjects = paginateDescribeProjects;
exports.paginateGetCelebrityRecognition = paginateGetCelebrityRecognition;
exports.paginateGetContentModeration = paginateGetContentModeration;
exports.paginateGetFaceDetection = paginateGetFaceDetection;
exports.paginateGetFaceSearch = paginateGetFaceSearch;
exports.paginateGetLabelDetection = paginateGetLabelDetection;
exports.paginateGetPersonTracking = paginateGetPersonTracking;
exports.paginateGetSegmentDetection = paginateGetSegmentDetection;
exports.paginateGetTextDetection = paginateGetTextDetection;
exports.paginateListCollections = paginateListCollections;
exports.paginateListDatasetEntries = paginateListDatasetEntries;
exports.paginateListDatasetLabels = paginateListDatasetLabels;
exports.paginateListFaces = paginateListFaces;
exports.paginateListMediaAnalysisJobs = paginateListMediaAnalysisJobs;
exports.paginateListProjectPolicies = paginateListProjectPolicies;
exports.paginateListStreamProcessors = paginateListStreamProcessors;
exports.paginateListUsers = paginateListUsers;
exports.waitForProjectVersionRunning = waitForProjectVersionRunning;
exports.waitForProjectVersionTrainingCompleted = waitForProjectVersionTrainingCompleted;
exports.waitUntilProjectVersionRunning = waitUntilProjectVersionRunning;
exports.waitUntilProjectVersionTrainingCompleted = waitUntilProjectVersionTrainingCompleted;
